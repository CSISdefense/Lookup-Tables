-- Insert new [idvagencyid] into FPDSTypeTable.AgencyID
INSERT INTO FPDSTypeTable.AgencyID
(AgencyID,AgencyIDtext)
SELECT fk.[idvagencyid]
,max(fk.parent_award_agency_name) as AgencyIDtext
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.AgencyID as pk
On pk.AgencyID=fk.[idvagencyid]
WHERE pk.AgencyID is NULL
GROUP BY fk.[idvagencyid]

-- Update AgencyIDtext using parent_award_agency_name where there is a blank in FPDSTypeTable.AgencyID
UPDATE pk
SET AgencyIDtext=fk.parent_award_agency_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.AgencyID as pk
On pk.AgencyID=fk.[idvagencyid]
WHERE nullif(pk.AgencyIDtext,'') is NULL AND
nullif(fk.parent_award_agency_name,'') is NOT NULL

-- Insert new [contractingofficeagencyid] into FPDSTypeTable.AgencyID
INSERT INTO FPDSTypeTable.AgencyID
(AgencyID,AgencyIDtext)
SELECT fk.[contractingofficeagencyid]
,max(fk.awarding_sub_agency_name) as AgencyIDtext
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.AgencyID as pk
On pk.AgencyID=fk.[contractingofficeagencyid]
WHERE pk.AgencyID is NULL
GROUP BY fk.[contractingofficeagencyid]

-- Update AgencyIDtext using awarding_sub_agency_name where there is a blank in FPDSTypeTable.AgencyID
UPDATE pk
SET AgencyIDtext=fk.awarding_sub_agency_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.AgencyID as pk
On pk.AgencyID=fk.[contractingofficeagencyid]
WHERE nullif(pk.AgencyIDtext,'') is NULL AND
nullif(fk.awarding_sub_agency_name,'') is NOT NULL

-- Insert new [maj_fund_agency_cat] into FPDSTypeTable.AgencyID
INSERT INTO FPDSTypeTable.AgencyID
(AgencyID,AgencyIDtext)
SELECT fk.[maj_fund_agency_cat]
,max(fk.funding_agency_name) as AgencyIDtext
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.AgencyID as pk
On pk.AgencyID=fk.[maj_fund_agency_cat]
WHERE pk.AgencyID is NULL
GROUP BY fk.[maj_fund_agency_cat]

-- Update AgencyIDtext using funding_agency_name where there is a blank in FPDSTypeTable.AgencyID
UPDATE pk
SET AgencyIDtext=fk.funding_agency_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.AgencyID as pk
On pk.AgencyID=fk.[maj_fund_agency_cat]
WHERE nullif(pk.AgencyIDtext,'') is NULL AND
nullif(fk.funding_agency_name,'') is NOT NULL

-- Insert new [fundingrequestingagencyid] into FPDSTypeTable.AgencyID
INSERT INTO FPDSTypeTable.AgencyID
(AgencyID,AgencyIDtext)
SELECT fk.[fundingrequestingagencyid]
,max(fk.funding_sub_agency_name) as AgencyIDtext
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.AgencyID as pk
On pk.AgencyID=fk.[fundingrequestingagencyid]
WHERE pk.AgencyID is NULL
GROUP BY fk.[fundingrequestingagencyid]

-- Update AgencyIDtext using funding_sub_agency_name where there is a blank in FPDSTypeTable.AgencyID
UPDATE pk
SET AgencyIDtext=fk.funding_sub_agency_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.AgencyID as pk
On pk.AgencyID=fk.[fundingrequestingagencyid]
WHERE nullif(pk.AgencyIDtext,'') is NULL AND
nullif(fk.funding_sub_agency_name,'') is NOT NULL

-- Insert new [fundedbyforeignentity] into budget.FundedByForeignEntity
INSERT INTO budget.FundedByForeignEntity
(fundedbyforeignentity,foreign_funding_description)
SELECT fk.[fundedbyforeignentity]
,max(fk.foreign_funding_description) as foreign_funding_description
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN budget.FundedByForeignEntity as pk
On pk.fundedbyforeignentity=fk.[fundedbyforeignentity]
WHERE pk.fundedbyforeignentity is NULL
GROUP BY fk.[fundedbyforeignentity]

-- Update foreign_funding_description using foreign_funding_description where there is a blank in budget.FundedByForeignEntity
UPDATE pk
SET foreign_funding_description=fk.foreign_funding_description
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN budget.FundedByForeignEntity as pk
On pk.fundedbyforeignentity=fk.[fundedbyforeignentity]
WHERE nullif(pk.foreign_funding_description,'') is NULL AND
nullif(fk.foreign_funding_description,'') is NOT NULL

-- Insert new [vendordoingasbusinessname] into Vendor.VendorName
INSERT INTO Vendor.VendorName
(vendorname)
SELECT fk.[vendordoingasbusinessname]
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Vendor.VendorName as pk
On pk.vendorname=fk.[vendordoingasbusinessname]
WHERE pk.vendorname is NULL
GROUP BY fk.[vendordoingasbusinessname]

-- Insert new [placeofperformancecountrycode] into FPDSTypeTable.Country3LetterCode
INSERT INTO FPDSTypeTable.Country3LetterCode
(Country3LetterCode,Country3LetterCodeText)
SELECT fk.[placeofperformancecountrycode]
,max(fk.primary_place_of_performance_country_name) as Country3LetterCodeText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.Country3LetterCode as pk
On pk.Country3LetterCode=fk.[placeofperformancecountrycode]
WHERE pk.Country3LetterCode is NULL
GROUP BY fk.[placeofperformancecountrycode]

-- Update Country3LetterCodeText using primary_place_of_performance_country_name where there is a blank in FPDSTypeTable.Country3LetterCode
UPDATE pk
SET Country3LetterCodeText=fk.primary_place_of_performance_country_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.Country3LetterCode as pk
On pk.Country3LetterCode=fk.[placeofperformancecountrycode]
WHERE nullif(pk.Country3LetterCodeText,'') is NULL AND
nullif(fk.primary_place_of_performance_country_name,'') is NOT NULL

-- Insert new [pop_state_code] into FPDSTypeTable.statecode
INSERT INTO FPDSTypeTable.statecode
(statecode,statecodeText)
SELECT fk.[pop_state_code]
,max(fk.primary_place_of_performance_state_name) as statecodeText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.statecode as pk
On pk.statecode=fk.[pop_state_code]
WHERE pk.statecode is NULL
GROUP BY fk.[pop_state_code]

-- Update statecodeText using primary_place_of_performance_state_name where there is a blank in FPDSTypeTable.statecode
UPDATE pk
SET statecodeText=fk.primary_place_of_performance_state_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.statecode as pk
On pk.statecode=fk.[pop_state_code]
WHERE nullif(pk.statecodeText,'') is NULL AND
nullif(fk.primary_place_of_performance_state_name,'') is NOT NULL

-- Insert new [award_type_code] into FPDSTypeTable.award_type_code
INSERT INTO FPDSTypeTable.award_type_code
(award_type_code,award_type_name)
SELECT fk.[award_type_code]
,max(fk.award_type_name) as award_type_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.award_type_code as pk
On pk.award_type_code=fk.[award_type_code]
WHERE pk.award_type_code is NULL
GROUP BY fk.[award_type_code]

-- Update award_type_name using award_type_name where there is a blank in FPDSTypeTable.award_type_code
UPDATE pk
SET award_type_name=fk.award_type_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.award_type_code as pk
On pk.award_type_code=fk.[award_type_code]
WHERE nullif(pk.award_type_name,'') is NULL AND
nullif(fk.award_type_name,'') is NOT NULL

-- Insert new [idv_type_code] into FPDSTypeTable.idv_type_code
INSERT INTO FPDSTypeTable.idv_type_code
(idv_type_code,idv_type_name)
SELECT fk.[idv_type_code]
,max(fk.idv_type_name) as idv_type_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.idv_type_code as pk
On pk.idv_type_code=fk.[idv_type_code]
WHERE pk.idv_type_code is NULL
GROUP BY fk.[idv_type_code]

-- Update idv_type_name using idv_type_name where there is a blank in FPDSTypeTable.idv_type_code
UPDATE pk
SET idv_type_name=fk.idv_type_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.idv_type_code as pk
On pk.idv_type_code=fk.[idv_type_code]
WHERE nullif(pk.idv_type_name,'') is NULL AND
nullif(fk.idv_type_name,'') is NOT NULL

-- Insert new [typeofidc] into FPDSTypeTable.TypeOfIDC
INSERT INTO FPDSTypeTable.TypeOfIDC
(typeofIDC,typeOfIDCdescription)
SELECT fk.[typeofidc]
,max(fk.type_of_idc_name) as typeOfIDCdescription
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.TypeOfIDC as pk
On pk.typeofIDC=fk.[typeofidc]
WHERE pk.typeofIDC is NULL
GROUP BY fk.[typeofidc]

-- Update typeOfIDCdescription using type_of_idc_name where there is a blank in FPDSTypeTable.TypeOfIDC
UPDATE pk
SET typeOfIDCdescription=fk.type_of_idc_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.TypeOfIDC as pk
On pk.typeofIDC=fk.[typeofidc]
WHERE nullif(pk.typeOfIDCdescription,'') is NULL AND
nullif(fk.type_of_idc_name,'') is NOT NULL

-- Insert new [typeofcontractpricing] into FPDSTypeTable.typeofcontractpricing
INSERT INTO FPDSTypeTable.typeofcontractpricing
(TypeOfContractPricing,TypeOfContractPricingText)
SELECT fk.[typeofcontractpricing]
,max(fk.type_of_contract_pricing_name) as TypeOfContractPricingText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.typeofcontractpricing as pk
On pk.TypeOfContractPricing=fk.[typeofcontractpricing]
WHERE pk.TypeOfContractPricing is NULL
GROUP BY fk.[typeofcontractpricing]

-- Update TypeOfContractPricingText using type_of_contract_pricing_name where there is a blank in FPDSTypeTable.typeofcontractpricing
UPDATE pk
SET TypeOfContractPricingText=fk.type_of_contract_pricing_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.typeofcontractpricing as pk
On pk.TypeOfContractPricing=fk.[typeofcontractpricing]
WHERE nullif(pk.TypeOfContractPricingText,'') is NULL AND
nullif(fk.type_of_contract_pricing_name,'') is NOT NULL

-- Insert new [reasonformodification] into FPDSTypeTable.reasonformodification
INSERT INTO FPDSTypeTable.reasonformodification
(reasonformodification,reasonformodificationText)
SELECT fk.[reasonformodification]
,max(fk.action_type_name) as reasonformodificationText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.reasonformodification as pk
On pk.reasonformodification=fk.[reasonformodification]
WHERE pk.reasonformodification is NULL
GROUP BY fk.[reasonformodification]

-- Update reasonformodificationText using action_type_name where there is a blank in FPDSTypeTable.reasonformodification
UPDATE pk
SET reasonformodificationText=fk.action_type_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.reasonformodification as pk
On pk.reasonformodification=fk.[reasonformodification]
WHERE nullif(pk.reasonformodificationText,'') is NULL AND
nullif(fk.action_type_name,'') is NOT NULL

-- Insert new [productorservicecode] into FPDSTypeTable.ProductOrServiceCode
INSERT INTO FPDSTypeTable.ProductOrServiceCode
(ProductOrServiceCode,ProductOrServiceCodeText)
SELECT fk.[productorservicecode]
,max(fk.product_or_service_code_description) as ProductOrServiceCodeText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.ProductOrServiceCode as pk
On pk.ProductOrServiceCode=fk.[productorservicecode]
WHERE pk.ProductOrServiceCode is NULL
GROUP BY fk.[productorservicecode]

-- Update ProductOrServiceCodeText using product_or_service_code_description where there is a blank in FPDSTypeTable.ProductOrServiceCode
UPDATE pk
SET ProductOrServiceCodeText=fk.product_or_service_code_description
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.ProductOrServiceCode as pk
On pk.ProductOrServiceCode=fk.[productorservicecode]
WHERE nullif(pk.ProductOrServiceCodeText,'') is NULL AND
nullif(fk.product_or_service_code_description,'') is NOT NULL

-- Insert new [contractbundling] into FPDSTypeTable.contractbundling
INSERT INTO FPDSTypeTable.contractbundling
(contractbundling,contractbundlingText)
SELECT fk.[contractbundling]
,max(fk.contract_bundling_name) as contractbundlingText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.contractbundling as pk
On pk.contractbundling=fk.[contractbundling]
WHERE pk.contractbundling is NULL
GROUP BY fk.[contractbundling]

-- Update contractbundlingText using contract_bundling_name where there is a blank in FPDSTypeTable.contractbundling
UPDATE pk
SET contractbundlingText=fk.contract_bundling_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.contractbundling as pk
On pk.contractbundling=fk.[contractbundling]
WHERE nullif(pk.contractbundlingText,'') is NULL AND
nullif(fk.contract_bundling_name,'') is NOT NULL

-- Insert new [claimantprogramcode] into FPDSTypeTable.ClaimantProgramCode
INSERT INTO FPDSTypeTable.ClaimantProgramCode
(ClaimantProgramCode,ClaimantProgramCodeText)
SELECT fk.[claimantprogramcode]
,max(fk.dod_claimant_program_description) as ClaimantProgramCodeText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.ClaimantProgramCode as pk
On pk.ClaimantProgramCode=fk.[claimantprogramcode]
WHERE pk.ClaimantProgramCode is NULL
GROUP BY fk.[claimantprogramcode]

-- Update ClaimantProgramCodeText using dod_claimant_program_description where there is a blank in FPDSTypeTable.ClaimantProgramCode
UPDATE pk
SET ClaimantProgramCodeText=fk.dod_claimant_program_description
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.ClaimantProgramCode as pk
On pk.ClaimantProgramCode=fk.[claimantprogramcode]
WHERE nullif(pk.ClaimantProgramCodeText,'') is NULL AND
nullif(fk.dod_claimant_program_description,'') is NOT NULL

-- Insert new [principalnaicscode] into FPDSTypeTable.PrincipalNaicsCode
INSERT INTO FPDSTypeTable.PrincipalNaicsCode
(principalnaicscode,principalnaicscodeText)
SELECT fk.[principalnaicscode]
,max(fk.naics_description) as principalnaicscodeText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.PrincipalNaicsCode as pk
On pk.principalnaicscode=fk.[principalnaicscode]
WHERE pk.principalnaicscode is NULL
GROUP BY fk.[principalnaicscode]

-- Update principalnaicscodeText using naics_description where there is a blank in FPDSTypeTable.PrincipalNaicsCode
UPDATE pk
SET principalnaicscodeText=fk.naics_description
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.PrincipalNaicsCode as pk
On pk.principalnaicscode=fk.[principalnaicscode]
WHERE nullif(pk.principalnaicscodeText,'') is NULL AND
nullif(fk.naics_description,'') is NOT NULL

-- Insert new [recoveredmaterialclauses] into FPDSTypeTable.recoveredmaterialclauses
INSERT INTO FPDSTypeTable.recoveredmaterialclauses
(recoveredmaterialclauses,recoveredmaterialclausesText)
SELECT fk.[recoveredmaterialclauses]
,max(fk.recovered_materials_sustainability_name) as recoveredmaterialclausesText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.recoveredmaterialclauses as pk
On pk.recoveredmaterialclauses=fk.[recoveredmaterialclauses]
WHERE pk.recoveredmaterialclauses is NULL
GROUP BY fk.[recoveredmaterialclauses]

-- Update recoveredmaterialclausesText using recovered_materials_sustainability_name where there is a blank in FPDSTypeTable.recoveredmaterialclauses
UPDATE pk
SET recoveredmaterialclausesText=fk.recovered_materials_sustainability_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.recoveredmaterialclauses as pk
On pk.recoveredmaterialclauses=fk.[recoveredmaterialclauses]
WHERE nullif(pk.recoveredmaterialclausesText,'') is NULL AND
nullif(fk.recovered_materials_sustainability_name,'') is NOT NULL

-- Insert new [manufacturingorganizationtype] into FPDSTypeTable.manufacturingorganizationtype
INSERT INTO FPDSTypeTable.manufacturingorganizationtype
(manufacturingorganizationtype,manufacturingorganizationtypeText)
SELECT fk.[manufacturingorganizationtype]
,max(fk.domestic_or_foreign_entity_name) as manufacturingorganizationtypeText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.manufacturingorganizationtype as pk
On pk.manufacturingorganizationtype=fk.[manufacturingorganizationtype]
WHERE pk.manufacturingorganizationtype is NULL
GROUP BY fk.[manufacturingorganizationtype]

-- Update manufacturingorganizationtypeText using domestic_or_foreign_entity_name where there is a blank in FPDSTypeTable.manufacturingorganizationtype
UPDATE pk
SET manufacturingorganizationtypeText=fk.domestic_or_foreign_entity_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.manufacturingorganizationtype as pk
On pk.manufacturingorganizationtype=fk.[manufacturingorganizationtype]
WHERE nullif(pk.manufacturingorganizationtypeText,'') is NULL AND
nullif(fk.domestic_or_foreign_entity_name,'') is NOT NULL

-- Insert new [informationtechnologycommercialitemcategory] into FPDSTypeTable.informationtechnologycommercialitemcategory
INSERT INTO FPDSTypeTable.informationtechnologycommercialitemcategory
(informationtechnologycommercialitemcategory,informationtechnologycommercialitemcategoryText)
SELECT fk.[informationtechnologycommercialitemcategory]
,max(fk.information_technology_commercial_item_category_name) as informationtechnologycommercialitemcategoryText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.informationtechnologycommercialitemcategory as pk
On pk.informationtechnologycommercialitemcategory=fk.[informationtechnologycommercialitemcategory]
WHERE pk.informationtechnologycommercialitemcategory is NULL
GROUP BY fk.[informationtechnologycommercialitemcategory]

-- Update informationtechnologycommercialitemcategoryText using information_technology_commercial_item_category_name where there is a blank in FPDSTypeTable.informationtechnologycommercialitemcategory
UPDATE pk
SET informationtechnologycommercialitemcategoryText=fk.information_technology_commercial_item_category_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.informationtechnologycommercialitemcategory as pk
On pk.informationtechnologycommercialitemcategory=fk.[informationtechnologycommercialitemcategory]
WHERE nullif(pk.informationtechnologycommercialitemcategoryText,'') is NULL AND
nullif(fk.information_technology_commercial_item_category_name,'') is NOT NULL

-- Insert new [useofepadesignatedproducts] into FPDSTypeTable.useofepadesignatedproducts
INSERT INTO FPDSTypeTable.useofepadesignatedproducts
(useofepadesignatedproducts,useofepadesignatedproductsText)
SELECT fk.[useofepadesignatedproducts]
,max(fk.epa_designated_product_name) as useofepadesignatedproductsText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.useofepadesignatedproducts as pk
On pk.useofepadesignatedproducts=fk.[useofepadesignatedproducts]
WHERE pk.useofepadesignatedproducts is NULL
GROUP BY fk.[useofepadesignatedproducts]

-- Update useofepadesignatedproductsText using epa_designated_product_name where there is a blank in FPDSTypeTable.useofepadesignatedproducts
UPDATE pk
SET useofepadesignatedproductsText=fk.epa_designated_product_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.useofepadesignatedproducts as pk
On pk.useofepadesignatedproducts=fk.[useofepadesignatedproducts]
WHERE nullif(pk.useofepadesignatedproductsText,'') is NULL AND
nullif(fk.epa_designated_product_name,'') is NOT NULL

-- Insert new [countryoforigin] into FPDSTypeTable.Country3LetterCode
INSERT INTO FPDSTypeTable.Country3LetterCode
(Country3LetterCode,Country3LetterCodeText)
SELECT fk.[countryoforigin]
,max(fk.country_of_product_or_service_origin_name) as Country3LetterCodeText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.Country3LetterCode as pk
On pk.Country3LetterCode=fk.[countryoforigin]
WHERE pk.Country3LetterCode is NULL
GROUP BY fk.[countryoforigin]

-- Update Country3LetterCodeText using country_of_product_or_service_origin_name where there is a blank in FPDSTypeTable.Country3LetterCode
UPDATE pk
SET Country3LetterCodeText=fk.country_of_product_or_service_origin_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.Country3LetterCode as pk
On pk.Country3LetterCode=fk.[countryoforigin]
WHERE nullif(pk.Country3LetterCodeText,'') is NULL AND
nullif(fk.country_of_product_or_service_origin_name,'') is NOT NULL

-- Insert new [placeofmanufacture] into FPDSTypeTable.PlaceOfManufacture
INSERT INTO FPDSTypeTable.PlaceOfManufacture
(PlaceOfManufacture,PlaceOfManufactureText)
SELECT fk.[placeofmanufacture]
,max(fk.place_of_manufacture_name) as PlaceOfManufactureText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.PlaceOfManufacture as pk
On pk.PlaceOfManufacture=fk.[placeofmanufacture]
WHERE pk.PlaceOfManufacture is NULL
GROUP BY fk.[placeofmanufacture]

-- Update PlaceOfManufactureText using place_of_manufacture_name where there is a blank in FPDSTypeTable.PlaceOfManufacture
UPDATE pk
SET PlaceOfManufactureText=fk.place_of_manufacture_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.PlaceOfManufacture as pk
On pk.PlaceOfManufacture=fk.[placeofmanufacture]
WHERE nullif(pk.PlaceOfManufactureText,'') is NULL AND
nullif(fk.place_of_manufacture_name,'') is NOT NULL

-- Insert new [subcontractplan] into FPDSTypeTable.subcontractplan
INSERT INTO FPDSTypeTable.subcontractplan
(subcontractplan,subcontractplanText)
SELECT fk.[subcontractplan]
,max(fk.subcontracting_plan_name) as subcontractplanText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.subcontractplan as pk
On pk.subcontractplan=fk.[subcontractplan]
WHERE pk.subcontractplan is NULL
GROUP BY fk.[subcontractplan]

-- Update subcontractplanText using subcontracting_plan_name where there is a blank in FPDSTypeTable.subcontractplan
UPDATE pk
SET subcontractplanText=fk.subcontracting_plan_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.subcontractplan as pk
On pk.subcontractplan=fk.[subcontractplan]
WHERE nullif(pk.subcontractplanText,'') is NULL AND
nullif(fk.subcontracting_plan_name,'') is NOT NULL

-- Insert new [solicitationprocedures] into FPDSTypeTable.solicitationprocedures
INSERT INTO FPDSTypeTable.solicitationprocedures
(solicitationprocedures,solicitationproceduresText)
SELECT fk.[solicitationprocedures]
,max(fk.solicitation_procedures_name) as solicitationproceduresText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.solicitationprocedures as pk
On pk.solicitationprocedures=fk.[solicitationprocedures]
WHERE pk.solicitationprocedures is NULL
GROUP BY fk.[solicitationprocedures]

-- Update solicitationproceduresText using solicitation_procedures_name where there is a blank in FPDSTypeTable.solicitationprocedures
UPDATE pk
SET solicitationproceduresText=fk.solicitation_procedures_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.solicitationprocedures as pk
On pk.solicitationprocedures=fk.[solicitationprocedures]
WHERE nullif(pk.solicitationproceduresText,'') is NULL AND
nullif(fk.solicitation_procedures_name,'') is NOT NULL

-- Insert new [typeofsetaside] into FPDSTypeTable.typeofsetaside
INSERT INTO FPDSTypeTable.typeofsetaside
(typeofsetaside,typeofsetasideText)
SELECT fk.[typeofsetaside]
,max(fk.type_of_set_aside_name) as typeofsetasideText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.typeofsetaside as pk
On pk.typeofsetaside=fk.[typeofsetaside]
WHERE pk.typeofsetaside is NULL
GROUP BY fk.[typeofsetaside]

-- Update typeofsetasideText using type_of_set_aside_name where there is a blank in FPDSTypeTable.typeofsetaside
UPDATE pk
SET typeofsetasideText=fk.type_of_set_aside_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.typeofsetaside as pk
On pk.typeofsetaside=fk.[typeofsetaside]
WHERE nullif(pk.typeofsetasideText,'') is NULL AND
nullif(fk.type_of_set_aside_name,'') is NOT NULL

-- Insert new [evaluatedpreference] into FPDSTypeTable.evaluatedpreference
INSERT INTO FPDSTypeTable.evaluatedpreference
(evaluatedpreference,evaluatedpreferenceText)
SELECT fk.[evaluatedpreference]
,max(fk.evaluated_preference_name) as evaluatedpreferenceText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.evaluatedpreference as pk
On pk.evaluatedpreference=fk.[evaluatedpreference]
WHERE pk.evaluatedpreference is NULL
GROUP BY fk.[evaluatedpreference]

-- Update evaluatedpreferenceText using evaluated_preference_name where there is a blank in FPDSTypeTable.evaluatedpreference
UPDATE pk
SET evaluatedpreferenceText=fk.evaluated_preference_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.evaluatedpreference as pk
On pk.evaluatedpreference=fk.[evaluatedpreference]
WHERE nullif(pk.evaluatedpreferenceText,'') is NULL AND
nullif(fk.evaluated_preference_name,'') is NOT NULL

-- Insert new [research_code] into ProductOrServiceCode.Research_Code
INSERT INTO ProductOrServiceCode.Research_Code
(Research_Code,Research_Name)
SELECT fk.[research_code]
,max(fk.research_name) as Research_Name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN ProductOrServiceCode.Research_Code as pk
On pk.Research_Code=fk.[research_code]
WHERE pk.Research_Code is NULL
GROUP BY fk.[research_code]

-- Update Research_Name using research_name where there is a blank in ProductOrServiceCode.Research_Code
UPDATE pk
SET Research_Name=fk.research_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN ProductOrServiceCode.Research_Code as pk
On pk.Research_Code=fk.[research_code]
WHERE nullif(pk.Research_Name,'') is NULL AND
nullif(fk.research_name,'') is NOT NULL

-- Insert new [reasonnotcompeted] into FPDSTypeTable.reasonnotcompeted
INSERT INTO FPDSTypeTable.reasonnotcompeted
(reasonnotcompeted,reasonnotcompetedText)
SELECT fk.[reasonnotcompeted]
,max(fk.other_than_full_and_open_competition_name) as reasonnotcompetedText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.reasonnotcompeted as pk
On pk.reasonnotcompeted=fk.[reasonnotcompeted]
WHERE pk.reasonnotcompeted is NULL
GROUP BY fk.[reasonnotcompeted]

-- Update reasonnotcompetedText using other_than_full_and_open_competition_name where there is a blank in FPDSTypeTable.reasonnotcompeted
UPDATE pk
SET reasonnotcompetedText=fk.other_than_full_and_open_competition_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.reasonnotcompeted as pk
On pk.reasonnotcompeted=fk.[reasonnotcompeted]
WHERE nullif(pk.reasonnotcompetedText,'') is NULL AND
nullif(fk.other_than_full_and_open_competition_name,'') is NOT NULL

-- Insert new [commercialitemacquisitionprocedures] into FPDSTypeTable.CommercialItemAcquisitionProcedures
INSERT INTO FPDSTypeTable.CommercialItemAcquisitionProcedures
(CommercialItemAcquisitionProcedures,CommercialItemAcquisitionProceduresText)
SELECT fk.[commercialitemacquisitionprocedures]
,max(fk.commercial_item_acquisition_procedures_name) as CommercialItemAcquisitionProceduresText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.CommercialItemAcquisitionProcedures as pk
On pk.CommercialItemAcquisitionProcedures=fk.[commercialitemacquisitionprocedures]
WHERE pk.CommercialItemAcquisitionProcedures is NULL
GROUP BY fk.[commercialitemacquisitionprocedures]

-- Update CommercialItemAcquisitionProceduresText using commercial_item_acquisition_procedures_name where there is a blank in FPDSTypeTable.CommercialItemAcquisitionProcedures
UPDATE pk
SET CommercialItemAcquisitionProceduresText=fk.commercial_item_acquisition_procedures_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.CommercialItemAcquisitionProcedures as pk
On pk.CommercialItemAcquisitionProcedures=fk.[commercialitemacquisitionprocedures]
WHERE nullif(pk.CommercialItemAcquisitionProceduresText,'') is NULL AND
nullif(fk.commercial_item_acquisition_procedures_name,'') is NOT NULL

-- Insert new [commercialitemtestprogram] into FPDSTypeTable.commercialitemtestprogram
INSERT INTO FPDSTypeTable.commercialitemtestprogram
(CommercialItemTestProgram,CommercialItemTestProgramText)
SELECT fk.[commercialitemtestprogram]
,max(fk.commercial_item_test_program_name) as CommercialItemTestProgramText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.commercialitemtestprogram as pk
On pk.CommercialItemTestProgram=fk.[commercialitemtestprogram]
WHERE pk.CommercialItemTestProgram is NULL
GROUP BY fk.[commercialitemtestprogram]

-- Update CommercialItemTestProgramText using commercial_item_test_program_name where there is a blank in FPDSTypeTable.commercialitemtestprogram
UPDATE pk
SET CommercialItemTestProgramText=fk.commercial_item_test_program_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.commercialitemtestprogram as pk
On pk.CommercialItemTestProgram=fk.[commercialitemtestprogram]
WHERE nullif(pk.CommercialItemTestProgramText,'') is NULL AND
nullif(fk.commercial_item_test_program_name,'') is NOT NULL

-- Insert new [fedbizopps] into FPDSTypeTable.fedbizopps
INSERT INTO FPDSTypeTable.fedbizopps
(fedbizopps,fed_biz_opps_name)
SELECT fk.[fedbizopps]
,max(fk.fed_biz_opps_name) as fed_biz_opps_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.fedbizopps as pk
On pk.fedbizopps=fk.[fedbizopps]
WHERE pk.fedbizopps is NULL
GROUP BY fk.[fedbizopps]

-- Update fed_biz_opps_name using fed_biz_opps_name where there is a blank in FPDSTypeTable.fedbizopps
UPDATE pk
SET fed_biz_opps_name=fk.fed_biz_opps_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.fedbizopps as pk
On pk.fedbizopps=fk.[fedbizopps]
WHERE nullif(pk.fed_biz_opps_name,'') is NULL AND
nullif(fk.fed_biz_opps_name,'') is NOT NULL

-- Insert new [localareasetaside] into Location.localareasetaside
INSERT INTO Location.localareasetaside
(localareasetaside,local_area_set_aside_name)
SELECT fk.[localareasetaside]
,max(fk.local_area_set_aside_name) as local_area_set_aside_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Location.localareasetaside as pk
On pk.localareasetaside=fk.[localareasetaside]
WHERE pk.localareasetaside is NULL
GROUP BY fk.[localareasetaside]

-- Update local_area_set_aside_name using local_area_set_aside_name where there is a blank in Location.localareasetaside
UPDATE pk
SET local_area_set_aside_name=fk.local_area_set_aside_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Location.localareasetaside as pk
On pk.localareasetaside=fk.[localareasetaside]
WHERE nullif(pk.local_area_set_aside_name,'') is NULL AND
nullif(fk.local_area_set_aside_name,'') is NOT NULL

-- Insert new [walshhealyact] into FPDSTypeTable.walshhealyact
INSERT INTO FPDSTypeTable.walshhealyact
(walshhealyact,walshhealyactText)
SELECT fk.[walshhealyact]
,max(fk.walsh_healey_act_name) as walshhealyactText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.walshhealyact as pk
On pk.walshhealyact=fk.[walshhealyact]
WHERE pk.walshhealyact is NULL
GROUP BY fk.[walshhealyact]

-- Update walshhealyactText using walsh_healey_act_name where there is a blank in FPDSTypeTable.walshhealyact
UPDATE pk
SET walshhealyactText=fk.walsh_healey_act_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.walshhealyact as pk
On pk.walshhealyact=fk.[walshhealyact]
WHERE nullif(pk.walshhealyactText,'') is NULL AND
nullif(fk.walsh_healey_act_name,'') is NOT NULL

-- Insert new [servicecontractact] into FPDSTypeTable.servicecontractact
INSERT INTO FPDSTypeTable.servicecontractact
(servicecontractact,servicecontractactText)
SELECT fk.[servicecontractact]
,max(fk.service_contract_act_name) as servicecontractactText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.servicecontractact as pk
On pk.servicecontractact=fk.[servicecontractact]
WHERE pk.servicecontractact is NULL
GROUP BY fk.[servicecontractact]

-- Update servicecontractactText using service_contract_act_name where there is a blank in FPDSTypeTable.servicecontractact
UPDATE pk
SET servicecontractactText=fk.service_contract_act_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.servicecontractact as pk
On pk.servicecontractact=fk.[servicecontractact]
WHERE nullif(pk.servicecontractactText,'') is NULL AND
nullif(fk.service_contract_act_name,'') is NOT NULL

-- Insert new [davisbaconact] into FPDSTypeTable.davisbaconact
INSERT INTO FPDSTypeTable.davisbaconact
(davisbaconact,davisbaconactText)
SELECT fk.[davisbaconact]
,max(fk.davis_bacon_act_name) as davisbaconactText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.davisbaconact as pk
On pk.davisbaconact=fk.[davisbaconact]
WHERE pk.davisbaconact is NULL
GROUP BY fk.[davisbaconact]

-- Update davisbaconactText using davis_bacon_act_name where there is a blank in FPDSTypeTable.davisbaconact
UPDATE pk
SET davisbaconactText=fk.davis_bacon_act_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.davisbaconact as pk
On pk.davisbaconact=fk.[davisbaconact]
WHERE nullif(pk.davisbaconactText,'') is NULL AND
nullif(fk.davis_bacon_act_name,'') is NOT NULL

-- Insert new [interagencycontractingauthority] into FPDSTypeTable.interagencycontractingauthority
INSERT INTO FPDSTypeTable.interagencycontractingauthority
(interagencycontractingauthority,interagencycontractingauthorityText)
SELECT fk.[interagencycontractingauthority]
,max(fk.interagency_contracting_authority_name) as interagencycontractingauthorityText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.interagencycontractingauthority as pk
On pk.interagencycontractingauthority=fk.[interagencycontractingauthority]
WHERE pk.interagencycontractingauthority is NULL
GROUP BY fk.[interagencycontractingauthority]

-- Update interagencycontractingauthorityText using interagency_contracting_authority_name where there is a blank in FPDSTypeTable.interagencycontractingauthority
UPDATE pk
SET interagencycontractingauthorityText=fk.interagency_contracting_authority_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.interagencycontractingauthority as pk
On pk.interagencycontractingauthority=fk.[interagencycontractingauthority]
WHERE nullif(pk.interagencycontractingauthorityText,'') is NULL AND
nullif(fk.interagency_contracting_authority_name,'') is NOT NULL

-- Insert new [parent_award_type_code] into FPDSTypeTable.idv_type_code
INSERT INTO FPDSTypeTable.idv_type_code
(idv_type_code,idv_type_name)
SELECT fk.[parent_award_type_code]
,max(fk.parent_award_type_name) as idv_type_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.idv_type_code as pk
On pk.idv_type_code=fk.[parent_award_type_code]
WHERE pk.idv_type_code is NULL
GROUP BY fk.[parent_award_type_code]

-- Update idv_type_name using parent_award_type_name where there is a blank in FPDSTypeTable.idv_type_code
UPDATE pk
SET idv_type_name=fk.parent_award_type_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.idv_type_code as pk
On pk.idv_type_code=fk.[parent_award_type_code]
WHERE nullif(pk.idv_type_name,'') is NULL AND
nullif(fk.parent_award_type_name,'') is NOT NULL

-- Insert new [parent_award_single_or_multiple_code] into FPDSTypeTable.multipleorsingleawardidc
INSERT INTO FPDSTypeTable.multipleorsingleawardidc
(multipleorsingleawardidc,multipleorsingleawardidcText)
SELECT fk.[parent_award_single_or_multiple_code]
,max(fk.parent_award_single_or_multiple_name) as multipleorsingleawardidcText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.multipleorsingleawardidc as pk
On pk.multipleorsingleawardidc=fk.[parent_award_single_or_multiple_code]
WHERE pk.multipleorsingleawardidc is NULL
GROUP BY fk.[parent_award_single_or_multiple_code]

-- Update multipleorsingleawardidcText using parent_award_single_or_multiple_name where there is a blank in FPDSTypeTable.multipleorsingleawardidc
UPDATE pk
SET multipleorsingleawardidcText=fk.parent_award_single_or_multiple_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.multipleorsingleawardidc as pk
On pk.multipleorsingleawardidc=fk.[parent_award_single_or_multiple_code]
WHERE nullif(pk.multipleorsingleawardidcText,'') is NULL AND
nullif(fk.parent_award_single_or_multiple_name,'') is NOT NULL

-- Insert new [majorprogramcode] into Contract.MajorProgramCode
INSERT INTO Contract.MajorProgramCode
(majorprogramcode)
SELECT fk.[majorprogramcode]
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Contract.MajorProgramCode as pk
On pk.majorprogramcode=fk.[majorprogramcode]
WHERE pk.majorprogramcode is NULL
GROUP BY fk.[majorprogramcode]

-- Insert new [nationalinterestactioncode] into Assistance.NationalInterestActionCode
INSERT INTO Assistance.NationalInterestActionCode
(NationalInterestActionCode,National_Interest_Action_Name)
SELECT fk.[nationalinterestactioncode]
,max(fk.national_interest_action_name) as National_Interest_Action_Name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Assistance.NationalInterestActionCode as pk
On pk.NationalInterestActionCode=fk.[nationalinterestactioncode]
WHERE pk.NationalInterestActionCode is NULL
GROUP BY fk.[nationalinterestactioncode]

-- Update National_Interest_Action_Name using national_interest_action_name where there is a blank in Assistance.NationalInterestActionCode
UPDATE pk
SET National_Interest_Action_Name=fk.national_interest_action_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Assistance.NationalInterestActionCode as pk
On pk.NationalInterestActionCode=fk.[nationalinterestactioncode]
WHERE nullif(pk.National_Interest_Action_Name,'') is NULL AND
nullif(fk.national_interest_action_name,'') is NOT NULL

-- Insert new [costorpricingdata] into FPDSTypeTable.costorpricingdata
INSERT INTO FPDSTypeTable.costorpricingdata
(costorpricingdata,costorpricingdataText)
SELECT fk.[costorpricingdata]
,max(fk.cost_or_pricing_data_name) as costorpricingdataText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.costorpricingdata as pk
On pk.costorpricingdata=fk.[costorpricingdata]
WHERE pk.costorpricingdata is NULL
GROUP BY fk.[costorpricingdata]

-- Update costorpricingdataText using cost_or_pricing_data_name where there is a blank in FPDSTypeTable.costorpricingdata
UPDATE pk
SET costorpricingdataText=fk.cost_or_pricing_data_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.costorpricingdata as pk
On pk.costorpricingdata=fk.[costorpricingdata]
WHERE nullif(pk.costorpricingdataText,'') is NULL AND
nullif(fk.cost_or_pricing_data_name,'') is NOT NULL

-- Insert new [costaccountingstandardsclause] into FPDSTypeTable.CostAccountingStandardsClause
INSERT INTO FPDSTypeTable.CostAccountingStandardsClause
(CostAccountingStandardsClause,cost_accounting_standards_clause_name)
SELECT fk.[costaccountingstandardsclause]
,max(fk.cost_accounting_standards_clause_name) as cost_accounting_standards_clause_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.CostAccountingStandardsClause as pk
On pk.CostAccountingStandardsClause=fk.[costaccountingstandardsclause]
WHERE pk.CostAccountingStandardsClause is NULL
GROUP BY fk.[costaccountingstandardsclause]

-- Update cost_accounting_standards_clause_name using cost_accounting_standards_clause_name where there is a blank in FPDSTypeTable.CostAccountingStandardsClause
UPDATE pk
SET cost_accounting_standards_clause_name=fk.cost_accounting_standards_clause_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.CostAccountingStandardsClause as pk
On pk.CostAccountingStandardsClause=fk.[costaccountingstandardsclause]
WHERE nullif(pk.cost_accounting_standards_clause_name,'') is NULL AND
nullif(fk.cost_accounting_standards_clause_name,'') is NOT NULL

-- Insert new [gfe_gfp_code] into FPDSTypeTable.gfe_gfp
INSERT INTO FPDSTypeTable.gfe_gfp
(gfe_gfp,gfe_gfpText)
SELECT fk.[gfe_gfp_code]
,max(fk.gfe_gfp_name) as gfe_gfpText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.gfe_gfp as pk
On pk.gfe_gfp=fk.[gfe_gfp_code]
WHERE pk.gfe_gfp is NULL
GROUP BY fk.[gfe_gfp_code]

-- Update gfe_gfpText using gfe_gfp_name where there is a blank in FPDSTypeTable.gfe_gfp
UPDATE pk
SET gfe_gfpText=fk.gfe_gfp_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.gfe_gfp as pk
On pk.gfe_gfp=fk.[gfe_gfp_code]
WHERE nullif(pk.gfe_gfpText,'') is NULL AND
nullif(fk.gfe_gfp_name,'') is NOT NULL

-- Insert new [seatransportation] into FPDSTypeTable.seatransportation
INSERT INTO FPDSTypeTable.seatransportation
(seatransportation,seatransportationText)
SELECT fk.[seatransportation]
,max(fk.sea_transportation_name) as seatransportationText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.seatransportation as pk
On pk.seatransportation=fk.[seatransportation]
WHERE pk.seatransportation is NULL
GROUP BY fk.[seatransportation]

-- Update seatransportationText using sea_transportation_name where there is a blank in FPDSTypeTable.seatransportation
UPDATE pk
SET seatransportationText=fk.sea_transportation_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.seatransportation as pk
On pk.seatransportation=fk.[seatransportation]
WHERE nullif(pk.seatransportationText,'') is NULL AND
nullif(fk.sea_transportation_name,'') is NOT NULL

-- Insert new [lettercontract] into FPDSTypeTable.lettercontract
INSERT INTO FPDSTypeTable.lettercontract
(LetterContract,UndefinitizedActionText)
SELECT fk.[lettercontract]
,max(fk.undefinitized_action_name) as UndefinitizedActionText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.lettercontract as pk
On pk.LetterContract=fk.[lettercontract]
WHERE pk.LetterContract is NULL
GROUP BY fk.[lettercontract]

-- Update UndefinitizedActionText using undefinitized_action_name where there is a blank in FPDSTypeTable.lettercontract
UPDATE pk
SET UndefinitizedActionText=fk.undefinitized_action_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.lettercontract as pk
On pk.LetterContract=fk.[lettercontract]
WHERE nullif(pk.UndefinitizedActionText,'') is NULL AND
nullif(fk.undefinitized_action_name,'') is NOT NULL

-- Insert new [consolidatedcontract] into Contract.consolidatedcontract
INSERT INTO Contract.consolidatedcontract
(consolidatedcontract,consolidated_contract_name)
SELECT fk.[consolidatedcontract]
,max(fk.consolidated_contract_name) as consolidated_contract_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Contract.consolidatedcontract as pk
On pk.consolidatedcontract=fk.[consolidatedcontract]
WHERE pk.consolidatedcontract is NULL
GROUP BY fk.[consolidatedcontract]

-- Update consolidated_contract_name using consolidated_contract_name where there is a blank in Contract.consolidatedcontract
UPDATE pk
SET consolidated_contract_name=fk.consolidated_contract_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Contract.consolidatedcontract as pk
On pk.consolidatedcontract=fk.[consolidatedcontract]
WHERE nullif(pk.consolidated_contract_name,'') is NULL AND
nullif(fk.consolidated_contract_name,'') is NOT NULL

-- Insert new [performancebasedservicecontract] into FPDSTypeTable.PerformanceBasedServiceContract
INSERT INTO FPDSTypeTable.PerformanceBasedServiceContract
(performancebasedservicecontract,performancebasedservicecontractText)
SELECT fk.[performancebasedservicecontract]
,max(fk.performance_based_service_acquisition_name) as performancebasedservicecontractText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.PerformanceBasedServiceContract as pk
On pk.performancebasedservicecontract=fk.[performancebasedservicecontract]
WHERE pk.performancebasedservicecontract is NULL
GROUP BY fk.[performancebasedservicecontract]

-- Update performancebasedservicecontractText using performance_based_service_acquisition_name where there is a blank in FPDSTypeTable.PerformanceBasedServiceContract
UPDATE pk
SET performancebasedservicecontractText=fk.performance_based_service_acquisition_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.PerformanceBasedServiceContract as pk
On pk.performancebasedservicecontract=fk.[performancebasedservicecontract]
WHERE nullif(pk.performancebasedservicecontractText,'') is NULL AND
nullif(fk.performance_based_service_acquisition_name,'') is NOT NULL

-- Insert new [contingencyhumanitarianpeacekeepingoperation] into Assistance.ContingencyHumanitarianPeacekeepingOperation
INSERT INTO Assistance.ContingencyHumanitarianPeacekeepingOperation
(ContingencyHumanitarianPeacekeepingOperation,contingencyhumanitarianpeacekeepingoperationText)
SELECT fk.[contingencyhumanitarianpeacekeepingoperation]
,max(fk.contingency_humanitarian_or_peacekeeping_operation_name) as contingencyhumanitarianpeacekeepingoperationText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Assistance.ContingencyHumanitarianPeacekeepingOperation as pk
On pk.ContingencyHumanitarianPeacekeepingOperation=fk.[contingencyhumanitarianpeacekeepingoperation]
WHERE pk.ContingencyHumanitarianPeacekeepingOperation is NULL
GROUP BY fk.[contingencyhumanitarianpeacekeepingoperation]

-- Update contingencyhumanitarianpeacekeepingoperationText using contingency_humanitarian_or_peacekeeping_operation_name where there is a blank in Assistance.ContingencyHumanitarianPeacekeepingOperation
UPDATE pk
SET contingencyhumanitarianpeacekeepingoperationText=fk.contingency_humanitarian_or_peacekeeping_operation_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Assistance.ContingencyHumanitarianPeacekeepingOperation as pk
On pk.ContingencyHumanitarianPeacekeepingOperation=fk.[contingencyhumanitarianpeacekeepingoperation]
WHERE nullif(pk.contingencyhumanitarianpeacekeepingoperationText,'') is NULL AND
nullif(fk.contingency_humanitarian_or_peacekeeping_operation_name,'') is NOT NULL

-- Insert new [contractingofficerbusinesssizedetermination] into FPDSTypeTable.contractingofficerbusinesssizedetermination
INSERT INTO FPDSTypeTable.contractingofficerbusinesssizedetermination
(contractingofficerbusinesssizedetermination,ContractingOfficerBusinessSizeDeterminationText)
SELECT fk.[contractingofficerbusinesssizedetermination]
,max(fk.ContractingOfficerBusinessSizeDeterminationText) as ContractingOfficerBusinessSizeDeterminationText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.contractingofficerbusinesssizedetermination as pk
On pk.contractingofficerbusinesssizedetermination=fk.[contractingofficerbusinesssizedetermination]
WHERE pk.contractingofficerbusinesssizedetermination is NULL
GROUP BY fk.[contractingofficerbusinesssizedetermination]

-- Update ContractingOfficerBusinessSizeDeterminationText using ContractingOfficerBusinessSizeDeterminationText where there is a blank in FPDSTypeTable.contractingofficerbusinesssizedetermination
UPDATE pk
SET ContractingOfficerBusinessSizeDeterminationText=fk.ContractingOfficerBusinessSizeDeterminationText
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN FPDSTypeTable.contractingofficerbusinesssizedetermination as pk
On pk.contractingofficerbusinesssizedetermination=fk.[contractingofficerbusinesssizedetermination]
WHERE nullif(pk.ContractingOfficerBusinessSizeDeterminationText,'') is NULL AND
nullif(fk.ContractingOfficerBusinessSizeDeterminationText,'') is NOT NULL

-- Insert new [award_or_idv_flag] into Contract.award_or_idv_flag
INSERT INTO Contract.award_or_idv_flag
(award_or_idv_flag)
SELECT fk.[award_or_idv_flag]
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Contract.award_or_idv_flag as pk
On pk.award_or_idv_flag=fk.[award_or_idv_flag]
WHERE pk.award_or_idv_flag is NULL
GROUP BY fk.[award_or_idv_flag]

-- Insert new [inherently_governmental_functions] into ProductOrServiceCode.inherently_governmental_functions
INSERT INTO ProductOrServiceCode.inherently_governmental_functions
(inherently_governmental_functions,inherently_governmental_functions_description)
SELECT fk.[inherently_governmental_functions]
,max(fk.inherently_governmental_functions_description) as inherently_governmental_functions_description
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN ProductOrServiceCode.inherently_governmental_functions as pk
On pk.inherently_governmental_functions=fk.[inherently_governmental_functions]
WHERE pk.inherently_governmental_functions is NULL
GROUP BY fk.[inherently_governmental_functions]

-- Update inherently_governmental_functions_description using inherently_governmental_functions_description where there is a blank in ProductOrServiceCode.inherently_governmental_functions
UPDATE pk
SET inherently_governmental_functions_description=fk.inherently_governmental_functions_description
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN ProductOrServiceCode.inherently_governmental_functions as pk
On pk.inherently_governmental_functions=fk.[inherently_governmental_functions]
WHERE nullif(pk.inherently_governmental_functions_description,'') is NULL AND
nullif(fk.inherently_governmental_functions_description,'') is NOT NULL

-- Insert new [organizationaltype] into Vendor.OrganizationalType
INSERT INTO Vendor.OrganizationalType
(OrganizationalType)
SELECT fk.[organizationaltype]
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Vendor.OrganizationalType as pk
On pk.OrganizationalType=fk.[organizationaltype]
WHERE pk.OrganizationalType is NULL
GROUP BY fk.[organizationaltype]

-- Insert new [contract_transaction_unique_key] into Contract.contract_transaction_unique_key
INSERT INTO Contract.contract_transaction_unique_key
(contract_transaction_unique_key)
SELECT fk.[contract_transaction_unique_key]
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Contract.contract_transaction_unique_key as pk
On pk.contract_transaction_unique_key=fk.[contract_transaction_unique_key]
WHERE pk.contract_transaction_unique_key is NULL
GROUP BY fk.[contract_transaction_unique_key]

-- Insert new [awarding_agency_code] into agency.awarding_agency_code
INSERT INTO agency.awarding_agency_code
(awarding_agency_code,awarding_agency_name)
SELECT fk.[awarding_agency_code]
,max(fk.awarding_agency_name) as awarding_agency_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN agency.awarding_agency_code as pk
On pk.awarding_agency_code=fk.[awarding_agency_code]
WHERE pk.awarding_agency_code is NULL
GROUP BY fk.[awarding_agency_code]

-- Update awarding_agency_name using awarding_agency_name where there is a blank in agency.awarding_agency_code
UPDATE pk
SET awarding_agency_name=fk.awarding_agency_name
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN agency.awarding_agency_code as pk
On pk.awarding_agency_code=fk.[awarding_agency_code]
WHERE nullif(pk.awarding_agency_name,'') is NULL AND
nullif(fk.awarding_agency_name,'') is NOT NULL

-- Insert new [recipient_uei] into Vendor.recipient_uei
INSERT INTO Vendor.recipient_uei
(recipient_uei)
SELECT fk.[recipient_uei]
FROM ErrorLogging.FPDSstage2 as fk
LEFT OUTER JOIN Vendor.recipient_uei as pk
On pk.recipient_uei=fk.[recipient_uei]
WHERE pk.recipient_uei is NULL
GROUP BY fk.[recipient_uei]

